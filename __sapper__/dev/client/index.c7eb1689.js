import { S as SvelteComponentDev, i as init, s as safe_not_equal, e as element, f as text, h as claim_element, j as children, k as claim_text, l as detach, v as attr, m as add_location, o as insert, p as append, q as set_data, D as create_bidirectional_transition, r as space, t as transition_in, b as transition_out, C as check_outros, E as onMount, F as add_render_callback, B as group_outros } from './chunk.31edceb9.js';

function cubicOut(t) {
    const f = t - 1.0;
    return f * f * f + 1.0;
}

function fly(node, { delay = 0, duration = 400, easing = cubicOut, x = 0, y = 0, opacity = 0 }) {
    const style = getComputedStyle(node);
    const target_opacity = +style.opacity;
    const transform = style.transform === 'none' ? '' : style.transform;
    const od = target_opacity * (1 - opacity);
    return {
        delay,
        duration,
        easing,
        css: (t, u) => `
			transform: ${transform} translate(${(1 - t) * x}px, ${(1 - t) * y}px);
			opacity: ${target_opacity - (od * u)}`
    };
}

/* src/routes/index.svelte generated by Svelte v3.6.7 */

const file = "src/routes/index.svelte";

// (25:4) {#if loaded}
function create_if_block(ctx) {
	var div, t, div_transition, current;

	return {
		c: function create() {
			div = element("div");
			t = text(ctx.stats);
			this.h();
		},

		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			t = claim_text(div_nodes, ctx.stats);
			div_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			attr(div, "class", "viewbox-content svelte-vwlw1i");
			add_location(div, file, 25, 8, 518);
		},

		m: function mount(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
			current = true;
		},

		p: function update(changed, ctx) {
			if (!current || changed.stats) {
				set_data(t, ctx.stats);
			}
		},

		i: function intro(local) {
			if (current) return;
			add_render_callback(() => {
				if (!div_transition) div_transition = create_bidirectional_transition(div, fly, { y: 60, duration: 1200 }, true);
				div_transition.run(1);
			});

			current = true;
		},

		o: function outro(local) {
			if (!div_transition) div_transition = create_bidirectional_transition(div, fly, { y: 60, duration: 1200 }, false);
			div_transition.run(0);

			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(div);
				if (div_transition) div_transition.end();
			}
		}
	};
}

function create_fragment(ctx) {
	var div, h1, t0, t1, current;

	var if_block = (ctx.loaded) && create_if_block(ctx);

	return {
		c: function create() {
			div = element("div");
			h1 = element("h1");
			t0 = text("classic db bot");
			t1 = space();
			if (if_block) if_block.c();
			this.h();
		},

		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			h1 = claim_element(div_nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "classic db bot");
			h1_nodes.forEach(detach);
			t1 = claim_text(div_nodes, "\r\n    ");
			if (if_block) if_block.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			attr(h1, "class", "main-title svelte-vwlw1i");
			add_location(h1, file, 23, 4, 448);
			attr(div, "class", "viewbox svelte-vwlw1i");
			add_location(div, file, 22, 0, 421);
		},

		m: function mount(target, anchor) {
			insert(target, div, anchor);
			append(div, h1);
			append(h1, t0);
			append(div, t1);
			if (if_block) if_block.m(div, null);
			current = true;
		},

		p: function update(changed, ctx) {
			if (ctx.loaded) {
				if (if_block) {
					if_block.p(changed, ctx);
					transition_in(if_block, 1);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div, null);
				}
			} else if (if_block) {
				group_outros();
				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});
				check_outros();
			}
		},

		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},

		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(div);
			}

			if (if_block) if_block.d();
		}
	};
}

function preload() {
    return this.fetch("/api/meta").then((r) => r.json()).then((stats) => {
        return { stats };
    });
}

function instance($$self, $$props, $$invalidate) {
	

    let { stats } = $$props;

    let loaded = false;

    onMount(() => {
        $$invalidate('loaded', loaded = true);
    });

	const writable_props = ['stats'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<Index> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ('stats' in $$props) $$invalidate('stats', stats = $$props.stats);
	};

	return { stats, loaded };
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, ["stats"]);

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.stats === undefined && !('stats' in props)) {
			console.warn("<Index> was created without expected prop 'stats'");
		}
	}

	get stats() {
		throw new Error("<Index>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set stats(value) {
		throw new Error("<Index>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Index;
export { preload };
